#import the Flask class, request, and response
from flask import Flask
from flask import request 
from flask import make_response
from flask import jsonify

#import json to modify update file
import json

#import module uuid & random to create user & rooms
import uuid
import random
import string

#import os to create directories
import os

#import re to detect url
import re

#import subproces for room creation
import subprocess

#import html to sanitize user input
import html

#import passlib apache for .htaccess files
from passlib.apache import HtpasswdFile

#import pillow to resize images
import PIL
from PIL import Image

#import base64 for images
import base64

#create an instance of this class
app = Flask(__name__)

def create_thumbnail(src_image):
  basewidth = 300
  img = Image.open(src_image)
  wpercent = (basewidth / float(img.size[0]))
  hsize = int((float(img.size[1]) * float(wpercent)))
  img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
  return img

def update_file_and_create_message(src_user, path_to_update, messages_dir, client_message, ping=False, dst_user=None, file_type=None, file_url=None, file_or_thumbnail=None):
  update_file = open(path_to_update, "r")
  update_content = json.load(update_file)
  update_file.close
  current_version = update_content.get('version')
  new_version = current_version + 1
  path_to_message = messages_dir + str(new_version) + ".json"
  message = {}
  message['src_user'] = src_user
  message['message'] = client_message
  if file_type is not None:
    message['file_type'] = file_type
  if file_url is not None:
    message['file_url'] = file_url
  if file_or_thumbnail is not None:
    message['file_or_thumbnail'] = file_or_thumbnail
  if ping is not None:
    message['ping'] = ping
  if dst_user is not None:
    message['dst_user'] = dst_user
  message_file = open(path_to_message, "w")
  json.dump(message, message_file)
  message_file.close
  update_content['version'] = new_version
  print(update_content)
  update_file = open(path_to_update, "w")
  json.dump(update_content, update_file)
  update_file.close
 
 
@app.route("/app/create_private")
def create_private():
    room_type = "private"
    the_domain = "{{ my_fqdn }}"
    the_uuid = str(uuid.uuid4())
    letters = string.ascii_letters
    digits = string.digits
    chars = letters + digits
    user = "".join(random.choices(chars, k=20))
    passwd = "".join(random.choices(chars, k=30))
{% if multirooms == True %}
    password_file_path = "./passwds/" + the_uuid + ".htpasswd"
{% endif %}
{% if multirooms == False %}
    password_file_path = "./passwds/htpasswd"
{% endif %}
    ht = HtpasswdFile(password_file_path, new=True, default_scheme="bcrypt")
    ht.set_password(user, passwd)
    ht.save()
    command = 'sudo /var/www/' + the_domain + '/app/create_room.sh ' + room_type + ' ' + the_uuid + ' ' +  the_domain
    shell_result = subprocess.call([command], shell=True)
{% if multirooms == True %}
    url = "https://" + the_uuid + ".{{ my_fqdn }}"
    server_name = the_uuid + ".{{ my_fqdn }}"
    room_response_dict = {}
    room_response_dict['User'] = user
    room_response_dict['Password'] = passwd
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}
{% if multirooms == False %}
    url = "https://{{ my_fqdn }}" + '/chat.html'
    server_name = "{{ my_fqdn }}"
    room_response_dict = {}
    room_response_dict['User'] = user
    room_response_dict['Password'] = passwd
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}

@app.route("/app/create_public")
def create_public():
    room_type = "public"
    the_domain = "{{ my_fqdn }}"
    the_uuid = str(uuid.uuid4())
    command = 'sudo /var/www/' + the_domain + '/app/create_room.sh ' + room_type + ' ' + the_uuid + ' ' +  the_domain
    shell_result = subprocess.call([command], shell=True)
{% if multirooms == True %}
    url = 'https://' + the_uuid + '.' + the_domain
    room_response_dict = {}
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}
{% if multirooms == False %}
    url = 'https://' + the_domain + '/chat.html'
    room_response_dict = {}
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}

@app.route("/app/post", methods=['GET', 'POST'])
def post():
    print(request.form)
    client_message = request.form['message']
    user_name = request.form['user_name']
    client_ip = request.environ.get('HTTP_X_REAL_IP', request.remote_addr)
    referer = request.referrer
    print(client_ip + ':' + client_message)
    room = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
    path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
    messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
{% endif %}
{% if multirooms == False %}
    path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
    messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
{% endif %}
    user_name = html.escape(user_name)
    client_message = html.escape(client_message)
    ping_detect = re.search('^/ping\s', client_message)
    if ping_detect is not None:
      client_message_words = client_message.split()
      target_user = client_message_words[1]
      client_message = " ".join(client_message_words[2:])
      update_file_and_create_message(user_name, path_to_update, messages_dir, client_message, True, target_user)
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, user_name + ' => ping => ' + target_user, True)  
      res = make_response("OK")
      return res
    pingack_detect = re.search('^/ping_ack', client_message)
    if pingack_detect is not None:
      client_message_words = client_message.split()
      src_user = client_message_words[1]
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, user_name + ' => ping ack => ' + src_user, False)
      res = make_response("OK")
      return res
    client_message_len = len(client_message)
    if client_message_len > 1000:
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, " what are you trying to write here " + user_name + " a novel??? 1000 characters maximum.", False)
      res = make_response("OK")
      return res
    else:
      update_file_and_create_message(user_name, path_to_update, messages_dir, client_message)
      res = make_response("OK")
      return res

@app.route("/app/quit", methods=['GET', 'POST'])
def quit():
  print(request.form)
  user_name = request.form['user_name']
  user_name = html.escape(user_name)
  referer = request.referrer
  room = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
{% endif %}
{% if multirooms == False %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
{% endif %}
  update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, user_name + " has quit", False)
  res = make_response("OK")
  return res


@app.route("/app/destroy", methods=['GET', 'POST'])
def destroy():
  print(request.form)
  the_domain = "{{ my_fqdn }}"
  user_name = request.form['user_name']
  user_name = html.escape(user_name)
  referer = request.referrer
  the_uuid = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
  command = 'sudo /var/www/' + the_domain + '/app/destroy_room.sh ' + user_name + ' ' + the_uuid + ' ' +  the_domain
  shell_result = subprocess.call([command], shell=True)
  return "<h6>OK BOSS</h6>" 


@app.route("/app/upload", methods=['GET', 'POST'])
def upload():
  file_data = request.files['file']
  file_name = file_data.filename
  print(file_data)
  user_name = request.form['user_name']
  user_name = html.escape(user_name)
  referer = request.referrer
  room = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_htmltop = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/html_top'
  path_to_htmlbottom = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/html_bottom'
  path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/conversation.html'
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
  path_to_file = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/files/' + file_data.filename
  path_to_file_folder = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/files/'
{% endif %}
{% if multirooms == False %}
  path_to_htmltop = '/var/www/{{ my_fqdn }}/app/rooms/html_top'
  path_to_htmlbottom = '/var/www/{{ my_fqdn }}/app/rooms/html_bottom'
  path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/conversation.html'
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
  path_to_file = '/var/www/{{ my_fqdn }}/app/rooms/files/' + file_data.filename
  path_to_file_folder = '/var/www/{{ my_fqdn }}/app/rooms/files/'
{% endif %}
{% if multirooms == True %}
  public_path_to_file = 'https://' + room + '.{{ my_fqdn }}/files/' + file_data.filename
{% endif %}
{% if multirooms == False %}
  public_path_to_file = 'https://' + '{{ my_fqdn }}' + '/files/' + file_data.filename
{% endif %}
  print(path_to_file)
  print(public_path_to_file)
  file_data.save(path_to_file)
  image_detect = re.search('.jpg|.jpeg|.JPG|.JPEG|.png|.PNG', file_name)
  gif_detect = re.search('.gif|.GIF', file_name)
  if image_detect is not None:
    thumbnail = create_thumbnail(path_to_file)
    thumbnail_file = thumbnail.save(path_to_file_folder + "thumb." + file_name)
    thumbnail_file_path = path_to_file_folder + "thumb." + file_name
    thumbnail_open = open(thumbnail_file_path, "rb")
    b64_thumbnail_bytes = base64.b64encode(thumbnail_open.read())
    b64_thumbnail_string = b64_thumbnail_bytes.decode('utf-8')
    thumbnail_open.close
    update_file_and_create_message(user_name, path_to_update, messages_dir, "Uploaded a file", False, None, 'image', public_path_to_file, b64_thumbnail_string)
  elif gif_detect is not None:
    gif_open = open(path_to_file, "rb")
    b64_gif_bytes = base64.b64encode(gif_open.read())
    b64_gif_string = b64_gif_bytes.decode('utf-8')
    gif_open.close
    update_file_and_create_message(user_name, path_to_update, messages_dir, "Uploaded a file", False, None, 'gif', public_path_to_file, b64_gif_string)
  else:
    update_file_and_create_message(user_name, path_to_update, messages_dir, "Uploaded a file", False, None, 'other', public_path_to_file)
  res = make_response("OK")
  return res

