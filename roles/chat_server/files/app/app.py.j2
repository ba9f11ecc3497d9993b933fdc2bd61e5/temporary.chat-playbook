#temporary.chat
#Copyright (C) 2020  Luc Baillargeon <all@200013.net>
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 3 as 
#published by the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <https://www.gnu.org/licenses/>.
#import the Flask class, request, and response
from flask import Flask
from flask import request 
from flask import make_response
from flask import jsonify

#import json to modify update file, create messages and Jason Web Tokens 
import json

#import module uuid & random to create user & rooms
import uuid
import random
import string

#import os to create directories, check if files exist, etc
import os

#import re to detect url
import re

#import subproces for room creation
import subprocess

#import time and datetime for room destruction
import time
import datetime

#import passlib apache for .htaccess files
from passlib.apache import HtpasswdFile

#import pillow to resize images
import PIL
from PIL import Image

#import base64 for images and
import base64

#import ElementTree for rss feed/notifications
import xml.etree.ElementTree as ET

#create an instance of this class
app = Flask(__name__)

def create_thumbnail(src_image):
  basewidth = 300
  img = Image.open(src_image)
  wpercent = (basewidth / float(img.size[0]))
  hsize = int((float(img.size[1]) * float(wpercent)))
  img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
  return img

def update_file_and_create_message(src_user, path_to_update, messages_dir, client_message, ping=False, dst_user=None, file_type=None, file_url=None, file_or_thumbnail=None):
  update_file = open(path_to_update, "r")
  update_content = json.load(update_file)
  update_file.close
  current_version = update_content.get('version')
  new_version = current_version + 1
  path_to_message = messages_dir + str(new_version) + ".json"
  message = {}
  message['src_user'] = src_user
  message['message'] = client_message
  if file_type is not None:
    message['file_type'] = file_type
  if file_url is not None:
    message['file_url'] = file_url
  if file_or_thumbnail is not None:
    message['file_or_thumbnail'] = file_or_thumbnail
  if ping is not None:
    message['ping'] = ping
  if dst_user is not None:
    message['dst_user'] = dst_user
  message_file = open(path_to_message, "w")
  json.dump(message, message_file)
  message_file.close
  update_content['version'] = new_version
  print(update_content)
  update_file = open(path_to_update, "w")
  json.dump(update_content, update_file)
  update_file.close

def write_to_rss(referrer, path_to_update, src_user, rss_file, client_message, dst_user=None, ping=False, file_type=None, file_url=None, file_or_thumbnail=None):
  update_file = open(path_to_update, "r")
  update_content = json.load(update_file)
  update_file.close
  current_version = update_content.get('version')
  xml_file = ET.parse(rss_file)
  channel = xml_file.getroot()[0]
  item = ET.SubElement(channel, 'item')
  title = ET.SubElement(item, 'title')
  link = ET.SubElement(item, 'link')
  guid = ET.SubElement(item, 'guid')
  guid.set('isPermaLink', 'false')
  description = ET.SubElement(item, 'description')
  PubDate = ET.SubElement(item, 'PubDate')
  if ping == True:
    title.text = "Ping notification from " + src_user + ' in ' + referrer
  else:
    title.text = "New message in " + referrer
  link.text = referrer
  guid.text = str(current_version)
  if file_url != None:
    img = ET.SubElement(description, 'img')
    img.set('src', file_or_thumbnail)
    link.text = file_url
  else: 
    description.text = src_user + ' : ' + client_message
  PubDate.text = datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
  b_xml = ET.tostring(channel)
  f = open(rss_file, "wb")
  f.write(b'<?xml version="1.0" encoding="utf-8"?><rss version="2.0">')
  f.write(b_xml)
  f.write(b'</rss>')
  f.close()
  f = open(rss_file, "r")
  content = f.read()
  print(content)


@app.route("/app/create_private")
def create_private():
    room_type = "private"
    the_domain = "{{ my_fqdn }}"
    the_uuid = str(uuid.uuid4())
    letters = string.ascii_letters
    digits = string.digits
    chars = letters + digits
    user = "".join(random.choices(chars, k=20))
    passwd = "".join(random.choices(chars, k=30))
{% if multirooms == True %}
    password_file_path = "./passwds/" + the_uuid + ".htpasswd"
{% endif %}
{% if multirooms == False %}
    password_file_path = "./passwds/htpasswd"
{% endif %}
    ht = HtpasswdFile(password_file_path, new=True, default_scheme="bcrypt")
    ht.set_password(user, passwd)
    ht.save()
    command = 'sudo /var/www/' + the_domain + '/app/create_room.sh ' + room_type + ' ' + the_uuid + ' ' +  the_domain
    shell_result = subprocess.call([command], shell=True)
{% if multirooms == True %}
    url = "https://" + the_uuid + ".{{ my_fqdn }}"
    server_name = the_uuid + ".{{ my_fqdn }}"
    room_response_dict = {}
    room_response_dict['User'] = user
    room_response_dict['Password'] = passwd
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}
{% if multirooms == False %}
    url = "https://{{ my_fqdn }}" + '/chat.html'
    server_name = "{{ my_fqdn }}"
    room_response_dict = {}
    room_response_dict['User'] = user
    room_response_dict['Password'] = passwd
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}

@app.route("/app/create_public")
def create_public():
    room_type = "public"
    the_domain = "{{ my_fqdn }}"
    the_uuid = str(uuid.uuid4())
    command = 'sudo /var/www/' + the_domain + '/app/create_room.sh ' + room_type + ' ' + the_uuid + ' ' +  the_domain
    shell_result = subprocess.call([command], shell=True)
{% if multirooms == True %}
    url = 'https://' + the_uuid + '.' + the_domain
    room_response_dict = {}
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}
{% if multirooms == False %}
    url = 'https://' + the_domain + '/chat.html'
    room_response_dict = {}
    room_response_dict['URL'] = url
    return jsonify(room_response_dict)
{% endif %}

@app.route("/app/post", methods=['GET', 'POST'])
def post():
    print(request.form)
    client_message = request.form['message']
    user_name = request.form['user_name']
    client_ip = request.environ.get('HTTP_X_REAL_IP', request.remote_addr)
    referrer = request.referrer
    print(client_ip + ':' + client_message)
    room = referrer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
    path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
    messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
    rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/rss/'
{% endif %}
{% if multirooms == False %}
    path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
    messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
    rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/rss/'
{% endif %}
    ping_detect = re.search('^/ping\s', client_message)
    if ping_detect is not None:
      client_message_words = client_message.split()
      target_user = client_message_words[1]
      client_message = " ".join(client_message_words[2:])
      rss_file = rss_dir + target_user + '_ping_notifs.rss'
      update_file_and_create_message(user_name, path_to_update, messages_dir, client_message, True, target_user)
      try:
        write_to_rss(referrer, path_to_update, user_name, rss_file, client_message, target_user, ping=True, file_type=None, file_url=None, file_or_thumbnail=None)
      except FileNotFoundError:
        pass
      rss_file = rss_dir + 'all.rss'
      client_message = 'PING_MESSAGE to ' + target_user + ' : ' + client_message
      try:
        write_to_rss(referrer, path_to_update, user_name, rss_file, client_message, target_user, ping=False, file_type=None, file_url=None, file_or_thumbnail=None)
      except FileNotFoundError:
        pass
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, user_name + ' => ping => ' + target_user, True)  
      success_dict = {}
      success_dict['Success'] = 'ping message sent to user ' + target_user
      return jsonify(success_dict)
    pingack_detect = re.search('^/ping_ack', client_message)
    if pingack_detect is not None:
      client_message_words = client_message.split()
      src_user = client_message_words[1]
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, user_name + ' => ping ack => ' + src_user, False)
      res = make_response("OK")
      return res
      success_dict = {}
      success_dict['Success'] = 'ping ack message sent to user ' + src_user
      return jsonify(success_dict)
    client_message_len = len(client_message)
    if client_message_len > 1000:
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, " what are you trying to write here " + user_name + " a novel??? 1000 characters maximum.", False)
      res = make_response("OK")
      return res
      error_dict = {}
      error_dict['error'] = 'what are you trying to write here ' + user_name + ' a novel??? 1000 characters maximum.'
      return jsonify(error_dict)
    else:
      rss_file = rss_dir + 'all.rss'
      update_file_and_create_message(user_name, path_to_update, messages_dir, client_message)
      try:
        write_to_rss(referrer, path_to_update, user_name, rss_file, client_message, dst_user=None, ping=False, file_type=None, file_url=None, file_or_thumbnail=None)
      except FileNotFoundError:
        pass
      success_dict = {}
      success_dict['Success'] = 'message sent'
      return jsonify(success_dict)

@app.route("/app/quit", methods=['GET', 'POST'])
def quit():
  print(request.form)
  user_name = request.form['user_name']
  referrer = request.referrer
  room = referrer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
{% endif %}
{% if multirooms == False %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
{% endif %}
  update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, user_name + " has quit", False)
  success_dict = {}
  success_dict['Success'] = 'you have sent a quit message to the room'
  return jsonify(success_dict)


@app.route("/app/destroy", methods=['GET', 'POST'])
def destroy():
  print(request.form)
  the_domain = "{{ my_fqdn }}"
  user_name = request.form['user_name']
  referrer = request.referrer
  room = referrer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
  the_uuid = referrer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_chat = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/chat.html'
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
  path_to_bomb = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/icons/bomb.png'
{% endif %}
{% if multirooms == False %}
  path_to_chat = '/var/www/{{ my_fqdn }}/app/rooms/chat.html'
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
  path_to_bomb = "/var/www/{{ my_fqdn }}/app/rooms/icons/bomb.png"
{% endif %}
  bomb_open = open(path_to_bomb, "rb")
  b64_bomb_bytes = base64.b64encode(bomb_open.read())
  b64_bomb_string = b64_bomb_bytes.decode('utf-8')
  bomb_open.close
  countdown_seconds = 15
  while countdown_seconds > 0:
    update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, user_name + " have dropped the bomb, this room will auto-destroy in " + str(countdown_seconds) + " seconds.", False, "bomb", 'image', "bomb", b64_bomb_string)
    time.sleep(1)
    countdown_seconds -= 1
  update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, "This room was destroyed by " + user_name + " on " + datetime.datetime.utcnow().strftime("%a %b %d %Y @ %H:%M:%S UTC"), False, "bomb", 'image', "bomb", b64_bomb_string)
  time.sleep(2)
  command = 'sudo /var/www/' + the_domain + '/app/destroy_room.sh ' + user_name + ' ' + the_uuid + ' ' +  the_domain
  shell_result = subprocess.call([command], shell=True)
  chat_html = open(path_to_chat, "w")
  chat_html.write("<html><body><h1>This room was destroyed by " + user_name + " on " + datetime.datetime.utcnow().strftime("%a %b %d %Y @ %H:%M:%S UTC") + "</h1></body></html>")
  chat_html.close
  success_dict = {}
  success_dict['Success'] = 'OK BOSS'
  return jsonify(success_dict)


@app.route("/app/upload", methods=['GET', 'POST'])
def upload():
  file_data = request.files['file']
  file_name = file_data.filename
  file_name_length = len(file_name)
  if (file_name_length == 0) or (file_name_length > 100):
    error_dict = {}
    error_dict['error'] = 'Invalid file length'
    return jsonify(error_dict)
    return res
  dot_detect = re.search('\.', file_name)
  if dot_detect is None:
    clean_file_name = re.sub(r'\W+', '', file_name)
    file_name = clean_file_name
  if dot_detect is not None:
    unclean_file_name_parts = file_name.split(".")
    unclean_extention = unclean_file_name_parts[-1:]
    unclean_file_name_sections = unclean_file_name_parts[:-1]
    clean_extension = re.sub(r'\W+', '', str(unclean_extention))
    unclean_file_name = '.'.join(unclean_file_name_sections)
    clean_file_name = re.sub(r'\W+', '', str(unclean_file_name))
    file_name = clean_file_name + '.' + clean_extension
  webfiles_detect = re.search('.js$|.html$|.css$|.htm$', file_name)
  if webfiles_detect is not None:
    file_name = file_name + '.dat'
  print(file_data)
  user_name = request.form['user_name']
  referrer = request.referrer
  room = referrer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
  path_to_file = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/files/' + file_name
  path_to_file_folder = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/files/'
  rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/rss/'
{% endif %}
{% if multirooms == False %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
  path_to_file = '/var/www/{{ my_fqdn }}/app/rooms/files/' + file_name
  path_to_file_folder = '/var/www/{{ my_fqdn }}/app/rooms/files/'
  rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/rss/'
{% endif %}
{% if multirooms == True %}
  public_path_to_file = 'https://' + room + '.{{ my_fqdn }}/files/' + file_name
  public_path_to_thumbnail = 'https://' + room + '.{{ my_fqdn }}/files/thumb.' + file_name
{% endif %}
{% if multirooms == False %}
  public_path_to_file = 'https://' + '{{ my_fqdn }}' + '/files/' + file_name
  public_path_to_thumbnail = 'https://' + '{{ my_fqdn }}' + '/files/thumb.' + file_name
{% endif %}
  file_data.save(path_to_file)
  image_detect = re.search('.jpg$|.jpeg$|.JPG$|.JPEG$|.png$|.PNG$', file_name)
  gif_detect = re.search('.gif$|.GIF$', file_name)
  if image_detect is not None:
    thumbnail = create_thumbnail(path_to_file)
    thumbnail_file = thumbnail.save(path_to_file_folder + "thumb." + file_name)
    thumbnail_file_path = path_to_file_folder + "thumb." + file_name
    thumbnail_open = open(thumbnail_file_path, "rb")
    b64_thumbnail_bytes = base64.b64encode(thumbnail_open.read())
    b64_thumbnail_string = b64_thumbnail_bytes.decode('utf-8')
    thumbnail_open.close
    update_file_and_create_message(user_name, path_to_update, messages_dir, "Uploaded a file", False, None, 'image', public_path_to_file, b64_thumbnail_string)
    rss_file = rss_dir + 'all.rss'
    try:
      write_to_rss(referrer, path_to_update, user_name, rss_file, "Uploaded a file", None, False, None, public_path_to_file, public_path_to_thumbnail)
    except FileNotFoundError:
      pass
  elif gif_detect is not None:
    gif_open = open(path_to_file, "rb")
    b64_gif_bytes = base64.b64encode(gif_open.read())
    b64_gif_string = b64_gif_bytes.decode('utf-8')
    gif_open.close
    update_file_and_create_message(user_name, path_to_update, messages_dir, "Uploaded a file", False, None, 'gif', public_path_to_file, b64_gif_string)
    rss_file = rss_dir + 'all.rss'
    try:
      write_to_rss(referrer, path_to_update, user_name, rss_file, "Uploaded a file", None, False, None, public_path_to_file, public_path_to_thumbnail)
    except FileNotFoundError:
      pass
  else:
    update_file_and_create_message(user_name, path_to_update, messages_dir, "Uploaded a file", False, None, 'other', public_path_to_file)
  success_dict = {}
  success_dict['Success'] = 'File uploaded'
  return jsonify(success_dict)

@app.route("/app/all_rss", methods=['GET', 'POST'])
def all_rss():
  client_message = request.form['message']
  user_name = request.form['user_name']
  referrer = request.referrer
  room = referrer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/rss/'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
  title = 'All Notifications for ' + room + '{{ my_fqdn }}'
{% endif %}
{% if multirooms == False %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/rss/'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
  title = 'All Notifications for {{ my_fqdn }}'   
{% endif %}
  all_xml = rss_dir + 'all.rss'
  if client_message == 'request_all_rss':
    if os.path.isfile(all_xml) == True:
      client_message = 'rss feed all.rss already exist'
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, client_message)
      error_dict = {}
      error_dict['error'] = 'rss feed all.rss already exist'
      return jsonify(error_dict)
    else:
      xml_prolog = '<?xml version="1.0" encoding="utf-8"?>'
      rss = ET.Element('rss')
      channel = ET.SubElement(rss, 'channel')
      xml_title = ET.SubElement(channel, 'title')
      xml_link = ET.SubElement(channel, 'link')
      xml_description = ET.SubElement(channel, 'description')
      xml_title.text = title
      xml_link.text = referrer
      xml_description.text = 'all notifications for room ' + referrer
      xml_file = open(all_xml, "a")
      xml_file.write(xml_prolog)
      xml_file.write(ET.tostring(rss, encoding='unicode'))
      xml_file.close()
      client_message = 'rss feed all.rss was created (requested by ' + user_name + ')'
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, client_message)
      rss_feed = referrer + 'rss/all.rss'
      rss_response_dict = {}
      rss_response_dict['rss'] = rss_feed
      return jsonify(rss_response_dict)
  else:
      client_message = 'Invalid request for this api call try user_name="$user" and message:"request_all_rss"'
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, client_message)
      error_dict = {}
      error_dict['error'] = 'Invalid request for this api call try user_name="$user" and message:"request_all_rss"'
      return jsonify(error_dict)


@app.route("/app/user_ping_rss", methods=['GET', 'POST'])
def user_ping_rss():
  client_message = request.form['message']
  user_name = request.form['user_name']
  referrer = request.referrer
  room = referrer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/rss/'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages/'
  title = 'ping Notifications for ' + user_name + ' in' + room + '{{ my_fqdn }}'
{% endif %}
{% if multirooms == False %}
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  rss_dir = '/var/www/{{ my_fqdn }}/app/rooms/rss/'
  messages_dir = '/var/www/{{ my_fqdn }}/app/rooms/messages/'
  title = 'ping Notifications for ' + user_name + ' in {{ my_fqdn }}'   
{% endif %}
  user_xml = rss_dir + user_name + '_ping_notifs.rss'
  if client_message == 'request_user_rss':
    if os.path.isfile(user_xml) == True:
      client_message = 'rss feed ' + user_name + '_ping_notifs.rss already exist'
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, client_message)
      error_dict = {}
      error_dict['error'] = user_name + '_ping_notifs.rss already exist'
      return jsonify(error_dict)
    else:
      xml_prolog = '<?xml version="1.0" encoding="utf-8"?>'
      rss = ET.Element('rss')
      channel = ET.SubElement(rss, 'channel')
      xml_title = ET.SubElement(channel, 'title')
      xml_link = ET.SubElement(channel, 'link')
      xml_description = ET.SubElement(channel, 'description')
      xml_title.text = title
      xml_link.text = referrer
      xml_description.text = 'ping notifications for ' + user_name + ' in room ' + referrer
      xml_file = open(user_xml, "a")
      xml_file.write(xml_prolog)
      xml_file.write(ET.tostring(rss, encoding='unicode'))
      xml_file.close()
      client_message = 'rss feed ' + user_name + '_ping_notifs.rss was created (requested by ' + user_name + ')'
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, client_message)
      rss_feed = referrer + 'rss/' + user_name + '_ping_notifs.rss'
      rss_response_dict = {}
      rss_response_dict['rss'] = rss_feed
      return jsonify(rss_response_dict)
  else:
      client_message = 'Invalid request for this api call try user_name="$user" and message:"request_user_rss"'
      update_file_and_create_message('room_bot V1.0', path_to_update, messages_dir, client_message)
      error_dict = {}
      error_dict['error'] = 'Invalid request for this api call try user_name="$user" and message:"request_user_rss"'
      return jsonify(error_dict)

@app.route("/app/api_help", methods=['GET', 'POST'])
def api_help():
  api_response_dict = {}
  api_response_dict['create a public room'] = "/app/create_public"
  api_response_dict['create a private room'] = "/app/create_private"
  api_response_dict['post a message'] = "/app/post"
  api_response_dict['send a quit message'] = "/app/quit"
  api_response_dict['upload a file'] = "/app/upload"
  api_response_dict['destroy the room'] = "/app/destroy"
  api_response_dict['request rss feed for all messages'] = "/app/all_rss"
  api_response_dict['request rss feed for ping to your user '] = "/app/user_ping_rss"
  return jsonify(api_response_dict)



