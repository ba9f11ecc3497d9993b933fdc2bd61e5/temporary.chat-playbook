#import the Flask class, request, and response
from flask import Flask
from flask import request 
from flask import make_response

#import json to modify update file
import json

#import module uuid & random to create user & rooms
import uuid
import random
import string

#import os to create directories
import os

#import re to detect url
import re

#import subproces for room creation
import subprocess

#import html to sanitize user input
import html

#import passlib apache for .htaccess files
from passlib.apache import HtpasswdFile

#import pillow to resize images
import PIL
from PIL import Image

#create an instance of this class
app = Flask(__name__)

def create_thumbnail(src_image):
  basewidth = 300
  img = Image.open(src_image)
  wpercent = (basewidth / float(img.size[0]))
  hsize = int((float(img.size[1]) * float(wpercent)))
  img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
  return img


def highlight_url(client_message):
  list_words = client_message.split(" ")
  new_message = ""
  for word in list_words:
    check_http = re.search('http://', word)
    if check_http is not None:  
      new_word = '<a href="' + word + '">' + word + '</a> '
      new_message = new_message + new_word
      continue
    check_https = re.search('https://', word)
    if check_https is not None:  
      new_word = '<a href="' + word + '">' + word + '</a> '
      new_message = new_message + new_word
      continue
    check_ftp = re.search('ftp://', word)
    if check_ftp is not None:  
      new_word = '<a href="' + word + '">' + word + '</a> '
      new_message = new_message + new_word
      continue
    check_ftps = re.search('ftps://', word)
    if check_ftps is not None:  
      new_word = '<a href="' + word + '">' + word + '</a> '
      new_message = new_message + new_word
      continue
    else:
      new_word = word + ' '
      new_message = new_message + new_word
  client_message = new_message
  return client_message


def build_message(path_to_htmltop, path_to_messages, path_to_htmlbottom, user_name, formatted_message):
  path_to_htmltop = path_to_htmltop
  path_to_messages = path_to_messages
  path_to_htmlbottom = path_to_htmlbottom
  user_name = user_name
  formatted_message = formatted_message
  messages = open(path_to_messages, "a")
  messages.write(formatted_message)
  messages.close
  htmltop = open(path_to_htmltop, "r")
  messages = open(path_to_messages, "r")
  htmlbottom = open(path_to_htmlbottom, "r")
  htmltop_content = htmltop.read()
  messages_content = messages.read()
  htmlbottom_content = htmlbottom.read()
  temp_conversation = ""
  temp_conversation = temp_conversation + htmltop_content
  temp_conversation = temp_conversation + messages_content
  temp_conversation = temp_conversation + htmlbottom_content
  htmltop.close
  messages.close
  htmlbottom.close
  return temp_conversation
  
def write_message(path_to_conversation, temp_conversation):
  path_to_conversation = path_to_conversation
  temp_conversation = temp_conversation
  conversation = open(path_to_conversation, "w+")
  conversation.write(temp_conversation)
  conversation.close

def rewrite_update_file(path_to_update, ping=False, ping_src_user=None, ping_dst_user=None, ping_message=None):
  path_to_update = path_to_update
  update_file = open(path_to_update, "r")
  update_content = json.load(update_file)
  update_file.close
  current_version = update_content.get('version')
  new_version = current_version + 1
  update_content['version'] = new_version
  update_content['ping'] = ping
  update_content['ping_src_user'] = ping_src_user
  update_content['ping_dst_user'] = ping_dst_user
  update_content['ping_message'] = ping_message
  update_file = open(path_to_update, "w")
  json.dump(update_content, update_file)
  update_file.close 
  
@app.route("/app/create_private")
def create_private():
    room_type = "private"
    the_domain = "{{ my_fqdn }}"
    the_uuid = str(uuid.uuid4())
    letters = string.ascii_letters
    digits = string.digits
    chars = letters + digits
    user = "".join(random.choices(chars, k=20))
    passwd = "".join(random.choices(chars, k=30))
{% if multirooms == True %}
    password_file_path = "./passwds/" + the_uuid + ".htpasswd"
{% endif %}
{% if multirooms == False %}
    password_file_path = "./passwds/htpasswd"
{% endif %}
    ht = HtpasswdFile(password_file_path, new=True, default_scheme="bcrypt")
    ht.set_password(user, passwd)
    ht.save()
    command = 'sudo /var/www/' + the_domain + '/app/create_room.sh ' + room_type + ' ' + the_uuid + ' ' +  the_domain
    shell_result = subprocess.call([command], shell=True)
{% if multirooms == True %}
    url = "https://" + the_uuid + ".{{ my_fqdn }}"
    server_name = the_uuid + ".{{ my_fqdn }}"
    return "<h6>User : " + user + "</h6><br>" + "<h6>Password : " + passwd + "</h6><br>" + "<h6>URL : " + url + "</h6><br>" + "<h6>Direct link : <a href=\"" + url + "\">" + url + "</h6>"
{% endif %}
{% if multirooms == False %}
    url = "https://{{ my_fqdn }}" + '/chat.html'
    server_name = "{{ my_fqdn }}"
    return "<h6>User : " + user + "</h6><br>" + "<h6>Password : " + passwd + "</h6><br>" + "<h6>URL : " + url + "</h6><br>" + "<h6>Direct link : <a href=\"" + url + "\">" + url + "</h6>"
{% endif %}


@app.route("/app/create_public")
def create_public():
    room_type = "public"
    the_domain = "{{ my_fqdn }}"
    the_uuid = str(uuid.uuid4())
    command = 'sudo /var/www/' + the_domain + '/app/create_room.sh ' + room_type + ' ' + the_uuid + ' ' +  the_domain
    shell_result = subprocess.call([command], shell=True)
{% if multirooms == True %}
    url = 'https://' + the_uuid + '.' + the_domain
    return "<h6>URL : " + url + "</h6><br>" + "<h6>Direct link : <a href=\"" + url + "\">" + url + "</h6>"
{% endif %}
{% if multirooms == False %}
    url = 'https://' + the_domain + '/chat.html'
    return "<h6>URL : " + url + "</h6><br>" + "<h6>Direct link : <a href=\"" + url + "\">" + url + "</h6>"
{% endif %}



@app.route("/app/post", methods=['GET', 'POST'])
def post():
    print(request.form)
    client_message = request.form['message']
    user_name = request.form['user_name']
    client_ip = request.environ.get('HTTP_X_REAL_IP', request.remote_addr)
    referer = request.referrer
    print(client_ip + ':' + client_message)
    room = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
    path_to_htmltop = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/html_top'
    path_to_messages = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages'
    path_to_htmlbottom = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/html_bottom'
    path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/conversation.html'
    path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
{% endif %}
{% if multirooms == False %}
    path_to_htmltop = '/var/www/{{ my_fqdn }}/app/rooms/html_top'
    path_to_messages = '/var/www/{{ my_fqdn }}/app/rooms/messages'
    path_to_htmlbottom = '/var/www/{{ my_fqdn }}/app/rooms/html_bottom'
    path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/conversation.html'
    path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
{% endif %}
    user_name = html.escape(user_name)
    client_message = html.escape(client_message)
    formatted_message = ""
    url_detect = re.search('http://|https://|ftp://|ftps://', client_message)
    if url_detect is not None:
      client_message = highlight_url(client_message)
      formatted_message = formatted_message + '<div class="speech"><p><b>' + user_name + ' : </b>' + client_message + '</p></div>'
      temp_conversation = build_message(path_to_htmltop, path_to_messages, path_to_htmlbottom, user_name, formatted_message)
      write_message(path_to_conversation, temp_conversation)
      rewrite_update_file(path_to_update)
      res = make_response("OK")
      return res
    ping_detect = re.search('^ping\s', client_message)
    if ping_detect is not None:
      formatted_message = '<div class="speech"><p><b>' + user_name + ' : </b>' + client_message + '</p></div>'
      temp_conversation = build_message(path_to_htmltop, path_to_messages, path_to_htmlbottom, user_name, formatted_message)
      write_message(path_to_conversation, temp_conversation)
      client_message_words = client_message.split()
      target_user = client_message_words[1]
      rewrite_update_file(path_to_update, True, user_name, target_user, client_message)
      res = make_response("OK")
      return res
    ping_detect = re.search('^ping_ack', client_message)
    if ping_detect is not None:
      rewrite_update_file(path_to_update)
      res = make_response("OK")
      return res
    client_message_len = len(client_message)
    if client_message_len > 5000:
      formatted_message = '<div class="speech"><p><b>What are you trying to write here ' + user_name + '? a novel? (5000 char max)</b></p></div>'
      temp_conversation = build_message(path_to_htmltop, path_to_messages, path_to_htmlbottom, user_name, formatted_message)
      write_message(path_to_conversation, temp_conversation)
      rewrite_update_file(path_to_update)
      res = make_response("OK")
      return res
    else:
      formatted_message = '<div class="speech"><p><b>' + user_name + ' : </b>' + client_message + '</p></div>'
      temp_conversation = build_message(path_to_htmltop, path_to_messages, path_to_htmlbottom, user_name, formatted_message)
      write_message(path_to_conversation, temp_conversation)
      rewrite_update_file(path_to_update)
      res = make_response("OK")
      return res

@app.route("/app/quit", methods=['GET', 'POST'])
def quit():
  print(request.form)
  user_name = request.form['user_name']
  user_name = html.escape(user_name)
  referer = request.referrer
  room = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/conversation.html'
{% endif %}
{% if multirooms == False %}
  path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/conversation.html'
{% endif %}
  formatted_message = '<div class="speech"><p><b>=> ' + user_name + ' has quit the room' + '</b></p></div>'
  print(formatted_message)
  file = open(path_to_conversation, "a")
  file.write(formatted_message)
  file.close
  res = make_response("OK")
  return res


@app.route("/app/destroy", methods=['GET', 'POST'])
def destroy():
  print(request.form)
  the_domain = "{{ my_fqdn }}"
  user_name = request.form['user_name']
  user_name = html.escape(user_name)
  referer = request.referrer
  the_uuid = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
  command = 'sudo /var/www/' + the_domain + '/app/destroy_room.sh ' + user_name + ' ' + the_uuid + ' ' +  the_domain
  shell_result = subprocess.call([command], shell=True)
  return "<h6>OK BOSS</h6>" 


@app.route("/app/upload", methods=['GET', 'POST'])
def upload():
  file_data = request.files['file']
  file_name = file_data.filename
  print(file_data)
  user_name = request.form['user_name']
  user_name = html.escape(user_name)
  referer = request.referrer
  room = referer.replace("https://","").replace(".{{ my_fqdn }}","").replace("/","")
{% if multirooms == True %}
  path_to_htmltop = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/html_top'
  path_to_messages = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/messages'
  path_to_htmlbottom = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/html_bottom'
  path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/conversation.html'
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/updates.json'
  path_to_file = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/files/' + file_data.filename
  path_to_file_folder = '/var/www/{{ my_fqdn }}/app/rooms/' + room + '/files/'
{% endif %}
{% if multirooms == False %}
  path_to_htmltop = '/var/www/{{ my_fqdn }}/app/rooms/html_top'
  path_to_messages = '/var/www/{{ my_fqdn }}/app/rooms/messages'
  path_to_htmlbottom = '/var/www/{{ my_fqdn }}/app/rooms/html_bottom'
  path_to_conversation = '/var/www/{{ my_fqdn }}/app/rooms/conversation.html'
  path_to_update = '/var/www/{{ my_fqdn }}/app/rooms/updates.json'
  path_to_file = '/var/www/{{ my_fqdn }}/app/rooms/files/' + file_data.filename
  path_to_file_folder = '/var/www/{{ my_fqdn }}/app/rooms/files/'
{% endif %}
{% if multirooms == True %}
  public_path_to_file = 'https://' + room + '.{{ my_fqdn }}/files/' + file_data.filename
{% endif %}
{% if multirooms == False %}
  public_path_to_file = 'https://' + '{{ my_fqdn }}' + '/files/' + file_data.filename
{% endif %}
  print(path_to_file)
  print(public_path_to_file)
  file_data.save(path_to_file)
  image_detect = re.search('.jpg|.jpeg|.JPG|.JPEG|.png|.PNG', file_name)
  gif_detect = re.search('.gif|.GIF', file_name)
  if image_detect is not None:
    thumbnail = create_thumbnail(path_to_file)
    thumbnail.save(path_to_file_folder + 'thumb.' + file_name)
    formatted_message = '<div class="speech"><p><b>=> ' + user_name + ' have uploaded a file : </b>' + '<a href="' + public_path_to_file + '">' + file_name + '</a></p><img src="files/thumb.' + file_name + '" alt="' + file_name + '"></div>'
  elif gif_detect is not None:
    formatted_message = '<div class="speech"><p><b>=> ' + user_name + ' have uploaded a file : </b>' + '<a href="' + public_path_to_file + '">' + file_name + '</a></p><img src="files/' + file_name + '" alt="' + file_name + '"></div>'
  else:
    formatted_message = '<div class="speech"><p><b>=> ' + user_name + ' have uploaded a file : </b>' + '<a href="' + public_path_to_file + '">' + file_data.filename + '</a></p></div>'
  temp_conversation = build_message(path_to_htmltop, path_to_messages, path_to_htmlbottom, user_name, formatted_message)
  write_message(path_to_conversation, temp_conversation)
  rewrite_update_file(path_to_update)
  res = make_response("OK")
  return res
