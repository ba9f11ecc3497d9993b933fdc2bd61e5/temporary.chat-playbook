// functions

async function print_messages(local_version, remote_version) {
    var div_conversation = document.getElementById('conversation');
    while (local_version < remote_version) {
        local_version++;
        message_url = current_url + "/messages/" + local_version + ".json"
        let response = await fetch(message_url);
        if (response.ok) {
            let message_file = await response.json();
            if(message_file.hasOwnProperty('file_url')) {
                if ((message_file.file_url == "bomb") && (message_file.src_user == "room_bot V1.0")) {
                    var src_user = message_file.src_user;
                    var message = message_file.message;
                    var img = document.createElement('img');
                    img.src = 'data:image/png;base64,' + message_file.file_or_thumbnail;
                    var bot_div = document.createElement('div');
                    var bomb_div = document.createElement('div');
                    bot_div.classList.add('speech-bot');
                    bomb_div.classList.add('speech-bot');
                    bot_div.appendChild(document.createTextNode(src_user + " : " + message));
                    bomb_div.appendChild(img);
                    div_conversation.appendChild(bot_div);
                    div_conversation.appendChild(bomb_div);
                }
                else if ((message_file.src_user != "room_bot V1.0") && (message_file.file_type == "image") || (message_file.file_type == "gif")) {
                    var src_user = message_file.src_user;
                    var message = src_user + " Uploaded a file : ";
                    var file_url = message_file.file_url;
                    var file_thumbnail = message_file.file_or_thumbnail;
                    var speech_div = document.createElement('div');
                    var image_div = document.createElement('div');
                    speech_div.classList.add('speech');
                    image_div.classList.add('speech');
                    var url = document.createElement('a');
                    url.appendChild(document.createTextNode(file_url));
                    url.title = file_url;
                    url.href = file_url;
                    var img = document.createElement('img');
                    image_ext =  file_url.split('.').pop()
                    if (image_ext == "jpg" || image_ext == "jpeg" || image_ext == "JPG" || image_ext == "JPEG") {
                        img.src = 'data:image/jpeg;base64,' + file_thumbnail;
                    }
                    if (image_ext == "png" || image_ext == "PNG") {
                        img.src = 'data:image/png;base64,' + file_thumbnail;
                    }
                    if (image_ext == "gif" || image_ext == "GIF") {
                        img.src = 'data:image/gif;base64,' + file_thumbnail;
                    }
                    image_div.appendChild(img);
                    speech_div.appendChild(document.createTextNode(message));
                    speech_div.appendChild(url);
                    div_conversation.appendChild(speech_div);
                    div_conversation.appendChild(image_div);
                }
                else if ((message_file.src_user != "room_bot V1.0") && (message_file.file_type != "image") && (message_file.file_type != "gif")) {
                    var src_user = message_file.src_user;
                    var message = src_user + " Uploaded a file : "; 
                    var file_url = message_file.file_url;
                    var speech_div = document.createElement('div');
                    var url = document.createElement('a');
                    url.appendChild(document.createTextNode(file_url));
                    url.title = file_url;
                    url.href = file_url;
                    speech_div.classList.add('speech');
                    speech_div.appendChild(document.createTextNode(message));
                    speech_div.appendChild(url);
                    div_conversation.appendChild(speech_div);
                }
            }
            else if (message_file.ping == true) {
                var src_user = message_file.src_user;
                var dst_user = message_file.dst_user;
                var message = message_file.message;
                if ( dst_user === user_name ) {
                    Notification.requestPermission(function(result) {
                    if (result === 'granted') {
                        var title = src_user;
                        var body = message;
                        const notification = new Notification(title, {body: body});
                        ping_ack(src_user)
                        }
                    })
                }
                var src_user = message_file.src_user;
                var dst_user = message_file.dst_user;
                var message = message_file.message;
                if (src_user == "room_bot V1.0") {
                    var bot_div = document.createElement('div');
                    bot_div.classList.add('speech-bot');
                    bot_div.appendChild(document.createTextNode(src_user + " : " + message));
                    div_conversation.appendChild(bot_div);
                }
                else {
                    var speech_div = document.createElement('div');
                    speech_div.classList.add('speech-imp');
                    speech_div.appendChild(document.createTextNode(src_user + " : " + message));
                    div_conversation.appendChild(speech_div);
                }
            }
            else if (!message_file.hasOwnProperty('file_url')) {
                var src_user = message_file.src_user;
                var message = message_file.message;
                if (src_user == "room_bot V1.0") {
                    var bot_div = document.createElement('div');
                    bot_div.classList.add('speech-bot');
                    bot_div.appendChild(document.createTextNode(src_user + " : " + message));
                    div_conversation.appendChild(bot_div);
                }
                else {    
                    var speech_div = document.createElement('div');
                    speech_div.classList.add('speech');
                    speech_div.appendChild(document.createTextNode(src_user + " : " + message));
                    div_conversation.appendChild(speech_div);
                }
            }
        }
    }
}

async function check_updates(arg) {
    var local_version = arg;
    update_url = current_url + "/updates.json?v=" + (new Date());
    let response = await fetch(update_url);
    if (response.ok) {
        let update_file = await response.json();
        remote_version = update_file.version;
        ping = update_file.ping;
        ping_src_user = update_file.ping_src_user;
        ping_dst_user = update_file.ping_dst_user;
        ping_message = update_file.ping_message;
        if (remote_version > local_version) {
            print_messages(local_version, remote_version);
            var local_version = remote_version;
            setTimeout(scroll_down, 500);
            pong(local_version);
        }
        else if (remote_version == local_version) {
            pong(local_version);
        }
        else if (remote_version < local_version) {
            var local_version = 0;
            pong(local_version);
        }
    }
    else {
        pong(local_version);
    }
}

function pong(arg) {
    var local_version = arg;
    setTimeout(check_updates, 750, local_version);
}

function fileChosen() {
    const fileInput = document.getElementById('file');
    const f = fileInput.files[0];
    if(f) {
        d.getElementsByClassName('file-form')[0].classList.remove('no-file-chosen')
    }
    else {
        d.getElementsByClassName('file-form')[0].classList.add('no-file-chosen');
    }
}

function set_user_name() {
    var user_name = document.getElementById('user_name').value;
    if (user_name.match(/^[a-z0-9]+$/i)) {
        if (user_name.length > 25) {
            alert("user name must be less than 25 characters");
        }
        else {
            document.cookie = user_name + ";SameSite=Strict; Secure";
        }
    }
    else {
      alert("user name can only be alphanumeric (a-z) (0-9)");
    }
}

async function post_message() {
    const url = 'https://{{ my_fqdn }}/app/post';
    var message = document.getElementById('post').value;
    document.getElementsByClassName('send-row')[0].reset();
    var user_name = document.cookie;
    let formData = new FormData();
    formData.append("user_name", user_name);
    formData.append("message", message);
    let response = await fetch(url, {body:formData,method:"post"});
    if (response.ok == true) {
        scroll_down();
    }
}

async function user_quit() {
    const url = 'https://{{ my_fqdn }}/app/quit';
    var user_name = document.cookie;
    let formData = new FormData();
    formData.append("user_name", user_name);
    let response = await fetch(url, {body:formData,method:"post"});
    if (response.ok == true) {
        window.location.href = 'https://duckduckgo.com/';
    }
}

function destroy() {
    const url = 'https://{{ my_fqdn }}/app/destroy';
    var user_name = document.cookie;
    let formData = new FormData();
    formData.append("user_name", user_name);
    fetch(url, {body:formData,method:"post"});
}

function preview_image() {
    var filesToUpload = document.getElementById('file').files;
    file = filesToUpload[0];
    if (file) {
        var reader = new FileReader();
        reader.onload = function(event) {
            var img = document.createElement('img');
            img.src = event.target.result;
            img.height = 100;
            var preview = document.getElementById('preview');
            preview.appendChild(img);
        }
        reader.readAsDataURL(file);
    }
    else {
        var preview = document.getElementById('preview');
        preview.removeChild(preview.childNodes[0]);
    }
}

async function upload_file() {
    const url = 'https://{{ my_fqdn }}/app/upload';
    var user_name = document.cookie;
    var fileInput = document.getElementById('file');
    var file = fileInput.files[0];
    let formData = new FormData();
    formData.append("user_name", user_name);
    formData.append("file", file);
    let response = await fetch(url, {body:formData,method:"post"});
    if (response.ok == true) {
        scroll_down();
        clear_preview();
        d.getElementsByClassName('file-form')[0].classList.add('no-file-chosen');
    }
}

function clear_preview() {
    var preview_section = document.getElementById('preview');
    while(preview_section.hasChildNodes()) {
        preview_section.removeChild(preview_section.lastChild);
    }
}


function scroll_down() {
    var textarea = document.getElementById('conversation');
    textarea.scrollTop = textarea.scrollHeight;
}

function toggleSidebar() {
    document.body.classList.toggle('sidebar-open');
}

function enable_notif() {
    if (typeof Notification !== "undefined") {
        permission = Notification.permission;
        if (permission !== "granted") {
            // normal notifs
            Notification.requestPermission().then(function(permission) {
                location.reload();
                return false; 
            });
        }
    }
    else {
        alert("your browser does not support notifications")
    }
}

async function ping_ack(src_user) {
    const url = 'https://{{ my_fqdn }}/app/post';
    var message = "/ping_ack " + src_user;
    var user_name = document.cookie;
    let formData = new FormData();
    formData.append("user_name", user_name);
    formData.append("message", message);
    let response = await fetch(url, {body:formData,method:"post"});
    if (response.ok == true) {
        return false;
    }
}

// code & listeners

// set defaults

var complete_url = window.location.href;
var current_url = complete_url.replace("chat.html", "");

const d = document;
var user_name = document.cookie;
if (user_name === "") {
    document.cookie = "Anonymous; SameSite=Strict; Secure";
}



// start the check server loop

check_updates(0);



// listen for post

document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('button-post')
    .addEventListener('click', post_message)
})

// listen for menu open
document.addEventListener('DOMContentLoaded', function () {
    document.getElementsByClassName('openbtn')[0]
    .addEventListener('click', toggleSidebar)
})

// listen for username

document.addEventListener('DOMContentLoaded', function () {
    document.getElementsByClassName('username-form')[0]
    .addEventListener('submit', set_user_name)
})

// listen for file preview

document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('file')
    .addEventListener('input', fileChosen)
    document.getElementById('file')
    .addEventListener('input', preview_image)
})

// listen for upload

document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('upload-form')
    .addEventListener('submit', upload_file)
})

// listen for notifs

document.addEventListener('DOMContentLoaded', function () {
    document.getElementsByClassName('btn-notif')[0]
    .addEventListener('click', enable_notif)
})

// listen for quit

document.addEventListener('DOMContentLoaded', function () {
    document.getElementsByClassName('btn-quit')[0]
    .addEventListener('click', user_quit)
})

// listen for destroy

document.addEventListener('DOMContentLoaded', function () {
    document.getElementsByClassName('btn-destroy')[0]
    .addEventListener('click', destroy)
})

// listen for close menu

document.addEventListener('DOMContentLoaded', function () {
    document.getElementsByClassName('btn-close_menu')[0]
    .addEventListener('click', toggleSidebar) 
})
